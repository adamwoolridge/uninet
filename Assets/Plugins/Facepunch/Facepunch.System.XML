<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Facepunch.System</name>
    </assembly>
    <members>
        <member name="P:Facepunch.CommandLine.Full">
            <summary>
            Returns the full command line, reconstructed from System.Environment.GetCommandLineArgs
            </summary>
        </member>
        <member name="M:Facepunch.CommandLine.Force(System.String)">
            <summary>
            Sometimes you want to force a command line instead of using the actual command line.
            To do that just call this function with the values you want "+my values -etc"
            </summary>
        </member>
        <member name="M:Facepunch.CommandLine.HasSwitch(System.String)">
            <summary>
            if ( HasSwitch( "-console" ) ) EnableConsole();
            </summary>
        </member>
        <member name="M:Facepunch.CommandLine.GetSwitches">
            <summary>
            Returns all command line values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Facepunch.Extend.Base36Extensions.ToBase36``1(``0)">
            <summary>
            Encode the given number into a Base36 string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Facepunch.Extend.Base36Extensions.FromBase36(System.String)">
            <summary>
            Decode the Base36 Encoded string into a number
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Facepunch.Extend.ByteExtensions.ReadFloat(System.Byte[],System.Int32)">
            <summary>
            Gets a float from the 4 bytes of memory at the specified offset
            </summary>
        </member>
        <member name="M:Facepunch.Extend.ByteExtensions.WriteFloat(System.Byte[],System.Single,System.Int32)">
            <summary>
            Sets 4 bytes of memory representing the float at the specified offset
            </summary>
        </member>
        <member name="M:Facepunch.Extend.DictionaryExtensions.GetOrCreate``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            If the key doesn't exist it is created and returned
            </summary>
        </member>
        <member name="M:Facepunch.Extend.DictionaryExtensions.GetOrCreatePooled``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            If the key doesn't exist it is created and returned
            Pooled version
            </summary>
        </member>
        <member name="M:Facepunch.Extend.DictionaryExtensions.Clone``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Clones the dictionary. Doesn't clone the values.
            </summary>
        </member>
        <member name="M:Facepunch.Extend.List.Compare``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            Compare two lists and categorize the difference into 3 lists - added, removed and remained
            </summary>
        </member>
        <member name="M:Facepunch.Extend.NumberExtensions.FormatBytes``1(``0,System.Boolean)">
            <summary>
            Given a number, will format as a memory value, ie 10gb, 4mb
            </summary>
        </member>
        <member name="M:Facepunch.Extend.NumberExtensions.Clamp``1(``0,``0,``0)">
            <summary>
            Clamp a number between two values
            </summary>
        </member>
        <member name="M:Facepunch.Extend.ReflectionExtensions.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Returns true if this member has this attribute
            </summary>
        </member>
        <member name="M:Facepunch.Extend.StringExtensions.QuoteSafe(System.String)">
            <summary>
            Puts quote marks around a string. Internal quotes are backslashed.
            </summary>
        </member>
        <member name="M:Facepunch.Extend.StringExtensions.SplitQuotesStrings(System.String)">
            <summary>
            in  : I am "splitting a" string "because it's fun"
            out : ["I", "am", "splitting a", "string", "because it's fun"]
            </summary>
        </member>
        <member name="M:Facepunch.Extend.StringExtensions.ToDecimal(System.String,System.Decimal)">
            <summary>
            128-bit data type that returns sane results for almost any input.
            All other numeric types can cast from this.
            </summary>
        </member>
        <member name="M:Facepunch.Extend.StringExtensions.ToFloat(System.String,System.Single)">
            <summary>
            Convert to float, if not then return Default
            </summary>
        </member>
        <member name="M:Facepunch.Extend.StringExtensions.ToInt(System.String,System.Int32)">
            <summary>
            Convert to int, if not then return Default
            </summary>
        </member>
        <member name="M:Facepunch.Extend.StringExtensions.ToBool(System.String)">
            <summary>
            Try to convert to bool. Inputs can be true, false, yes, no, 0, 1, null (caps insensitive)
            </summary>
        </member>
        <member name="M:Facepunch.Extend.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
            If the string is longer than this amount of characters then truncate it
            If appendage is defined, it will be appended to the end of truncated strings (ie, "..")
            </summary>
        </member>
        <member name="M:Facepunch.Extend.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            An extended Contains which takes a StringComparison
            </summary>
        </member>
        <member name="M:Facepunch.Extend.StringExtensions.Snippet(System.String,System.String,System.Int32)">
            <summary>
            Given a large string, find all occurrances of a substring and return them with padding.
            This is useful in situations where you're searching for a word in a hug body of text, and
            want to show how it's used without displaying the whole text.
            </summary>
        </member>
        <member name="M:Facepunch.Extend.StringExtensions.RemoveBadCharacters(System.String)">
            <summary>
            Removes bad, invisible characters that are commonly used to exploit.
            https://en.wikipedia.org/wiki/Zero-width_non-joiner
            </summary>
        </member>
        <member name="P:Facepunch.Math.Epoch.Current">
            <summary>
            Returns the current Unix Epoch
            </summary>
        </member>
        <member name="M:Facepunch.Math.Epoch.ToDateTime(System.Decimal)">
            <summary>
            Convert an epoch to a datetime
            </summary>
        </member>
        <member name="M:Facepunch.Pool.FreeList``1(System.Collections.Generic.List{``0}@)">
            <summary>
            Clears a list and adds it to the pool
            </summary>
        </member>
        <member name="M:Facepunch.Pool.Free``1(``0@)">
            <summary>
            Return the object to the queue.
            This object should have been reset to its default state.
            </summary>
        </member>
        <member name="M:Facepunch.Pool.Get``1">
            <summary>
            A pooled version of calling "new T()"
            </summary>
        </member>
        <member name="M:Facepunch.Pool.FindCollection``1">
            <summary>
            Gets a PoolCollection. Use for diagnostics, debug printing.
            </summary>
        </member>
    </members>
</doc>
