<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Facepunch.UnityEditor</name>
    </assembly>
    <members>
        <member name="M:NodeEditorFramework.NodeEditorWindow.AutoOpenCanvas(System.Int32,System.Int32)">
            <summary>
            Handle opening canvas when double-clicking asset
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditorWindow.SaveNodeCanvas(System.String)">
            <summary>
            Saves the mainNodeCanvas and it's associated mainEditorState as an asset at path
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditorWindow.LoadNodeCanvas(System.String)">
            <summary>
            Loads the mainNodeCanvas and it's associated mainEditorState from an asset at path
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditorWindow.NewNodeCanvas">
            <summary>
            Creates and opens a new empty node canvas
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeInput.Create(NodeEditorFramework.Node,System.String,System.String)">
            <summary>
            Creates a new NodeInput in NodeBody of specified type
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeInput.Create(NodeEditorFramework.Node,System.String,System.String,NodeEditorFramework.NodeSide)">
            <summary>
            Creates a new NodeInput in NodeBody of specified type
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeInput.Create(NodeEditorFramework.Node,System.String,System.String,NodeEditorFramework.NodeSide,System.Single)">
            <summary>
            Creates a new NodeInput in NodeBody of specified type at the specified Node Side
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeOutput.Create(NodeEditorFramework.Node,System.String,System.String)">
            <summary>
            Creates a new NodeOutput in NodeBody of specified type
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeOutput.Create(NodeEditorFramework.Node,System.String,System.String,NodeEditorFramework.NodeSide)">
            <summary>
            Creates a new NodeOutput in NodeBody of specified type
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeOutput.Create(NodeEditorFramework.Node,System.String,System.String,NodeEditorFramework.NodeSide,System.Single)">
            <summary>
            Creates a new NodeOutput in NodeBody of specified type at the specified Node Side
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeOutput.GetValue``1">
            <summary>
            Gets the output value.
            </summary>
            <returns>Value, if null default(T) (-> For reference types, null. For value types, default value)</returns>
        </member>
        <member name="M:NodeEditorFramework.NodeOutput.SetValue``1(``0)">
            <summary>
            Sets the value.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeOutput.ResetValue">
            <summary>
            Resets the value to null.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeOutput.getDefault``1">
            <summary>
            Returns for value types the default value; for reference types, the default constructor if existant, else null
            </summary>
        </member>
        <member name="M:NodeEditorFramework.ConnectionTypes.GetTypeData(System.String)">
            <summary>
            Gets the type data for the specified type name, if declared
            </summary>
        </member>
        <member name="M:NodeEditorFramework.ConnectionTypes.GetType(System.String)">
            <summary>
            Gets the Type the specified type name representates, if declared
            </summary>
        </member>
        <member name="M:NodeEditorFramework.ConnectionTypes.FetchTypes">
            <summary>
            Fetches every Type Declaration in the script assembly and the executing one, if the NodeEditor is packed into a .dll
            </summary>
        </member>
        <member name="P:NodeEditorFramework.Node.GetID">
            <summary>
            Get the ID of the Node
            </summary>
        </member>
        <member name="P:NodeEditorFramework.Node.AllowRecursion">
            <summary>
            Should we allow recursion? Recursion is allowed if atleast a single Node in the loop allows for recursion
            </summary>
        </member>
        <member name="P:NodeEditorFramework.Node.ContinueCalculation">
            <summary>
            After the Calculate function is called on this node, should the Nodes afterwards be calculated?
            </summary>
        </member>
        <member name="P:NodeEditorFramework.Node.AcceptsTranstitions">
            <summary>
            Does this Node accepts Transitions?
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.Create(UnityEngine.Vector2)">
            <summary>
            Function implemented by the children to create the node
            </summary>
            <param name="pos">Position.</param>
        </member>
        <member name="M:NodeEditorFramework.Node.NodeGUI">
            <summary>
            Function implemented by the children to draw the node
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.Calculate">
            <summary>
            Function implemented by the children to calculate their outputs
            Should return Success/Fail
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.OnDelete">
            <summary>
            Optional callback when the node is deleted
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.OnAddInputConnection(NodeEditorFramework.NodeInput)">
            <summary>
            Optional callback when the NodeInput input was assigned a new connection
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.OnAddOutputConnection(NodeEditorFramework.NodeOutput)">
            <summary>
            Optional callback when the NodeOutput output was assigned a new connection (the last in the list)
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.OnAddTransition(NodeEditorFramework.Transition)">
            <summary>
            Optional callback when the transition was created
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.InitBase">
            <summary>
            Init the Node Base after the Node has been created. This includes adding to canvas, and to calculate for the first time
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.Delete">
            <summary>
            Deletes this Node from curNodeCanvas
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.DrawNode">
            <summary>
            Draws the node. Depends on curEditorState. Can be overridden by an node type.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.DrawKnobs">
            <summary>
            Draws the node knobs; splitted from curves because of the render order
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.DrawConnections">
            <summary>
            Draws the node curves; splitted from knobs because of the render order
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.DrawTransitions">
            <summary>
            Draws the node transitions.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.allInputsReady">
            <summary>
            Checks if there are no unassigned and no null-value inputs.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.hasUnassignedInputs">
            <summary>
            Checks if there are any unassigned inputs.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.descendantsCalculated">
            <summary>
            Returns whether every direct dexcendant has been calculated
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.isInput">
            <summary>
            Returns whether the node acts as an input (no inputs or no inputs assigned)
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.CreateOutput(System.String,System.String)">
            <summary>
            Creates and output on your Node of the given type.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.CreateOutput(System.String,System.String,NodeEditorFramework.NodeSide)">
            <summary>
            Creates and output on this Node of the given type at the specified NodeSide.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.CreateOutput(System.String,System.String,NodeEditorFramework.NodeSide,System.Single)">
            <summary>
            Creates and output on this Node of the given type at the specified NodeSide and position.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.OutputKnob(System.Int32)">
            <summary>
            Aligns the OutputKnob on it's NodeSide with the last GUILayout control drawn.
            </summary>
            <param name="outputIdx">The index of the output in the Node's Outputs list</param>
        </member>
        <member name="M:NodeEditorFramework.Node.GetOutputAtPos(UnityEngine.Vector2)">
            <summary>
            Returns the output knob that is at the position on this node or null
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.CreateInput(System.String,System.String)">
            <summary>
            Creates and input on your Node of the given type.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.CreateInput(System.String,System.String,NodeEditorFramework.NodeSide)">
            <summary>
            Creates and input on this Node of the given type at the specified NodeSide.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.CreateInput(System.String,System.String,NodeEditorFramework.NodeSide,System.Single)">
            <summary>
            Creates and input on this Node of the given type at the specified NodeSide and position.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.InputKnob(System.Int32)">
            <summary>
            Aligns the InputKnob on it's NodeSide with the last GUILayout control drawn.
            </summary>
            <param name="inputIdx">The index of the input in the Node's Inputs list</param>
        </member>
        <member name="M:NodeEditorFramework.Node.GetInputAtPos(UnityEngine.Vector2)">
            <summary>
            Returns the input knob that is at the position on this node or null
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.isChildOf(NodeEditorFramework.Node)">
            <summary>
            Recursively checks whether this node is a child of the other node
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.isInLoop">
            <summary>
            Recursively checks whether this node is in a loop
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.allowsLoopRecursion(NodeEditorFramework.Node)">
            <summary>
            Recursively checks whether any node in the loop to be made allows recursion.
            Other node is the node this node needs connect to in order to fill the loop (other node being the node coming AFTER this node).
            That means isChildOf has to be confirmed before calling this!
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.ClearCalculation">
            <summary>
            A recursive function to clear all calculations depending on this node.
            Usually does not need to be called manually
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.BeginRecursiveSearchLoop">
            <summary>
            Begins the recursive search loop and returns whether this node has already been searched
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.EndRecursiveSearchLoop">
            <summary>
            Ends the recursive search loop if this was the start node
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.StopRecursiveSearchLoop">
            <summary>
            Stops the recursive search loop immediately. Call when you found what you needed.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.CanApplyConnection(NodeEditorFramework.NodeOutput,NodeEditorFramework.NodeInput)">
            <summary>
            Check if an output and an input can be connected (same type, ...)
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.ApplyConnection(NodeEditorFramework.NodeOutput,NodeEditorFramework.NodeInput)">
            <summary>
            Applies a connection between output and input. 'CanApplyConnection' has to be checked before
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Node.RemoveConnection(NodeEditorFramework.NodeInput)">
            <summary>
            Removes the connection from NodeInput.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.DrawCanvas(NodeEditorFramework.NodeCanvas,NodeEditorFramework.NodeEditorState)">
            <summary>
            Draws the Node Canvas on the screen in the rect specified by editorState
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.DrawSubCanvas(NodeEditorFramework.NodeCanvas,NodeEditorFramework.NodeEditorState)">
            <summary>
            Draws the Node Canvas on the screen in the rect specified by editorState without one-time wrappers like GUISkin and OverlayGUI. Made for nested Canvases (WIP)
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.NodeAtPosition(UnityEngine.Vector2)">
            <summary>
            Returns the node at the position in the current canvas spcae. Depends on curEditorState and curNodecanvas
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.NodeAtPosition(NodeEditorFramework.NodeEditorState,NodeEditorFramework.NodeCanvas,UnityEngine.Vector2)">
            <summary>
            Returns the node at the position in specified canvas space.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.CanvasGUIToScreenRect(UnityEngine.Rect)">
            <summary>
            Transforms the Rect in GUI space into Screen space. Depends on curEditorState
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.CanvasGUIToScreenRect(NodeEditorFramework.NodeEditorState,UnityEngine.Rect)">
            <summary>
            Transforms the Rect in GUI space into Screen space
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.ScreenToGUIPos(UnityEngine.Vector2)">
            <summary>
            Transforms screen position pos (like mouse pos) to a point in current GUI space
            </summary>
            
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.ScreenToGUIPos(NodeEditorFramework.NodeEditorState,UnityEngine.Vector2)">
            <summary>
            Transforms screen position pos (like mouse pos) to a point in specified GUI space
            </summary>
            
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.InputEvents">
            <summary>
            Processes input events
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.LateEvents">
            <summary>
            Proccesses late events. Called after GUI Functions, when they have higher priority in focus
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.ContextCallback(System.Object)">
            <summary>
            Context Click selection. Here you'll need to register your own using a string identifier
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.GetNext(NodeEditorFramework.Node,NodeEditorFramework.Node,NodeEditorFramework.Node@)">
            <summary>
            If any transitions of the node have their conditions met, it saves the nextNode the transition points to, else returns the passed node.
            Returns false when the node hasn't any transitions to transition to.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.RecalculateAll(NodeEditorFramework.NodeCanvas)">
            <summary>
            Recalculate from every Input Node.
            Usually does not need to be called at all, the smart calculation system is doing the job just fine
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.RecalculateFrom(NodeEditorFramework.Node)">
            <summary>
            Recalculate from this node. 
            Usually does not need to be called manually
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.StartCalculation">
            <summary>
            Iterates through workList and calculates everything, including children
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.ContinueCalculation(NodeEditorFramework.Node)">
            <summary>
            Recursive function which continues calculation on this node and all the child nodes
            Usually does not need to be called manually
            Returns success/failure of this node only
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.SaveNodeCanvas(NodeEditorFramework.NodeCanvas,System.String,NodeEditorFramework.NodeEditorState[])">
            <summary>
            Saves the current node canvas as a new asset and links optional editorStates with it
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.LoadNodeCanvas(System.String)">
            <summary>
            Loads the NodeCanvas in the asset file at path
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.LoadEditorStates(System.String)">
            <summary>
            Loads the editorStates found in the nodeCanvas asset file at path
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.GetWorkingCopy(NodeEditorFramework.NodeEditorState)">
            <summary>
            Gets a working copy of the editor state. This will break the link to the asset and thus all changes made to the working copy have to be explicitly saved.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditor.GetWorkingCopy(NodeEditorFramework.NodeCanvas)">
            <summary>
            Gets a working copy of the canvas. This will break the link to the canvas asset and thus all changes made to the working copy have to be explicitly saved.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditorGUI.DrawConnection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color)">
            <summary>
            Draws a node connection from start to end, horizontally
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditorGUI.DrawConnection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color)">
            <summary>
            Draws a node connection from start to end with specified vectors
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditorGUI.DrawConnection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,NodeEditorFramework.ConnectionDrawMethod,UnityEngine.Color)">
            <summary>
            Draws a node connection from start to end with specified vectors
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeEditorGUI.GetSecondConnectionVector(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Gets the second connection vector that matches best, accounting for positions
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeKnob.DisplayLayout">
            <summary>
            Automatically draw the output with it's name and set the knob next to it at the current side.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeKnob.DisplayLayout(UnityEngine.GUIContent)">
            <summary>
            Automatically draw the output with the specified label and set the knob next to it at the current side.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeKnob.DisplayLayout(UnityEngine.GUIContent,UnityEngine.GUIStyle)">
            <summary>
            Automatically draw the output with the specified label and it's style and set the knob next to it at the current side.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeKnob.SetPosition(System.Single,NodeEditorFramework.NodeSide)">
            <summary>
            Set the knob position at the specified side, from Top->Bottom and Left->Right
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeKnob.SetPosition(System.Single)">
            <summary>
            Set the knob position at the current side, from Top->Bottom and Left->Right
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeKnob.SetPosition">
            <summary>
            Set the knob position at the current side next to the last Layout control
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeKnob.GetGUIKnob">
            <summary>
            Get the Knob rect in GUI space, NOT ZOOMED
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeKnob.GetScreenKnob">
            <summary>
            Get the Knob rect in screen space, ZOOMED, for Input purposes
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeKnob.GetDirection">
            <summary>
            Gets the direction of the knob (vertical inverted)
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeKnob.getRotationStepsAntiCW(NodeEditorFramework.NodeSide,NodeEditorFramework.NodeSide)">
            <summary>
            Gets the rotation steps anti-clockwise from NodeSide A to B
            </summary>
        </member>
        <member name="M:NodeEditorFramework.NodeTypes.FetchNodes">
            <summary>
            Fetches every Node Declaration in the assembly
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.GUIScaleUtility.BeginScale(UnityEngine.Rect@,UnityEngine.Vector2,System.Single,System.Boolean)">
            <summary>
            Begins a scaled local area. 
            Returns vector to offset GUI controls with to account for zooming to the pivot. 
            Using adjustGUILayout does that automatically for GUILayout rects. Theoretically can be nested!
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.GUIScaleUtility.EndScale">
            <summary>
            Ends a scale region previously opened with BeginScale
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.GUIScaleUtility.BeginNoClip">
            <summary>
            Begins a field without groups. They should be restored using RestoreClips. Can be nested!
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.GUIScaleUtility.MoveClipsUp(System.Int32)">
            <summary>
            Begins a field without the last count groups. They should be restored using RestoreClips. Can be nested!
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.GUIScaleUtility.RestoreClips">
            <summary>
            Restores the clips removed in BeginNoClip or MoveClipsUp
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.GUIScaleUtility.BeginNewLayout">
            <summary>
            Ignores the current GUILayout cache and begins a new one. Cannot be nested!
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.GUIScaleUtility.EndNewLayout">
            <summary>
            Ends the last GUILayout cache
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.GUIScaleUtility.BeginIgnoreMatrix">
            <summary>
            Begins an area without GUIMatrix transformations. Can be nested!
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.GUIScaleUtility.EndIgnoreMatrix">
            <summary>
            Restores last matrix ignored with BeginIgnoreMatrix
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.GUIScaleUtility.ScaleRect(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Scales the rect around the pivot with scale
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.GUIScaleUtility.InnerToScreenRect(UnityEngine.Rect)">
            <summary>
            Transforms the rect to the new space aquired with BeginNoClip or MoveClipsUp. 
            It's way faster to call GUIToScreenRect before calling any of these functions though!
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.GUIScaleUtility.GUIToScreenRect(UnityEngine.Rect)">
            <summary>
            Transforms the rect to screen space. 
            Use InnerToScreenRect when you want to transform an old rect to the new space aquired with BeginNoClip or MoveClipsUp (slower, try to call this function before any of these two)!
            ATTENTION: This does not work well when any of the top groups is negative, means extends to the top or left of the screen. You may consider to use InnerToScreenRect then, if possible!
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.OverlayGUI.HasPopupControl">
            <summary>
            Returns if any popup currently has control.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.OverlayGUI.StartOverlayGUI">
            <summary>
            Starts the OverlayGUI (Call before any other GUI code!)
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.OverlayGUI.EndOverlayGUI">
            <summary>
            Ends the OverlayGUI (Call after any other GUI code!)
            </summary>
        </member>
        <member name="T:NodeEditorFramework.Utilities.PopupMenu">
            <summary>
            A Generic Popupmenu. Used by GenericMenu, Popup (future), etc.
            </summary>
        </member>
        <member name="T:NodeEditorFramework.Utilities.GenericMenu">
            <summary>
            Generic Menu which mimics UnityEditor.GenericMenu class pretty much exactly. Wrapper for the generic PopupMenu.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.ResourceManager.LoadResource``1(System.String)">
            <summary>
            Loads a resource in the resources folder in both the editor and at runtime
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.ResourceManager.LoadTexture(System.String)">
            <summary>
            Loads a texture in the resources folder in both the editor and at runtime
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.ResourceManager.AddTexture(System.String,UnityEngine.Texture2D,System.String[])">
            <summary>
            Adds an additional texture into the manager memory with optional modifications
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.ResourceManager.FindInMemory(UnityEngine.Texture2D)">
            <summary>
            Whether the manager memory contains a texture with optional modifications
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.ResourceManager.Contains(System.String,System.String[])">
            <summary>
            Whether the manager memory contains a texture with optional modifications
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.ResourceManager.GetMemoryTexture(System.String,System.String[])">
            <summary>
            Gets a texture already in manager memory with specified modifications (check with contains before!)
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.ResourceManager.GetTexture(System.String,System.String[])">
            <summary>
            Gets a texture already in manager memory with specified modifications (check with contains before!)
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.TextField(UnityEngine.GUIContent,System.String)">
            <summary>
            Float Field with label for ingame purposes. Behaves like UnityEditor.EditorGUILayout.TextField
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.FloatField(UnityEngine.GUIContent,System.Single)">
            <summary>
            Float Field for ingame purposes. Behaves exactly like UnityEditor.EditorGUILayout.FloatField, besides the label slide field
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.FloatField(System.Single)">
            <summary>
            Float Field for ingame purposes. Behaves exactly like UnityEditor.EditorGUILayout.FloatField
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.ForceParse(System.String)">
            <summary>
            Forces to parse to float by cleaning string if necessary
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.ObjectField``1(``0,System.Boolean)">
            <summary>
            Provides an object field both for editor (using default) and for runtime (not yet implemented other that displaying object)
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.ObjectField``1(UnityEngine.GUIContent,``0,System.Boolean)">
            <summary>
            Provides an object field both for editor (using default) and for runtime (not yet implemented other that displaying object)
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.Seperator">
            <summary>
            A GUI Function which simulates the default seperator
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.Seperator(UnityEngine.Rect)">
            <summary>
            A GUI Function which simulates the default seperator
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.DrawBezier(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color)">
            <summary>
            Draws a Bezier curve just as UnityEditor.Handles.DrawBezier, non-clipped, with width of 1
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.DrawBezier(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color,UnityEngine.Texture2D,System.Single)">
            <summary>
            Draws a Bezier curve just as UnityEditor.Handles.DrawBezier, non-clipped. If width is 1, tex is ignored; Else if tex is null, a anti-aliased texture tinted with col will be used; else, col is ignored and tex is used.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.CalculateBezierSegmentCount(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Calculates the optimal bezier segment count for the given bezier
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.GetBezierPoint(System.Single,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Gets the point of the bezier at t
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.DrawLineSegment(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Adds a line sgement to the GL buffer. Useed in a row to create a line
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.DrawLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color,UnityEngine.Texture2D,System.Single)">
            <summary>
            Draws a non-clipped line. If tex is null, a anti-aliased texture tinted with col will be used; else, col is ignored and tex is used.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.ColorToTex(System.Int32,UnityEngine.Color)">
            <summary>
            Create a 1x1 tex with color col
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.Tint(UnityEngine.Texture2D,UnityEngine.Color)">
            <summary>
            Tint the texture with the color. It's advised to use ResourceManager.GetTintedTexture to account for doubles.
            </summary>
        </member>
        <member name="M:NodeEditorFramework.Utilities.RTEditorGUI.RotateTextureAntiCW(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Rotates the texture Anti-Clockwise, 'NintyDegrSteps' specifying the times
            </summary>
        </member>
    </members>
</doc>
